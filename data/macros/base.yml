# Provides core definitions which each profile may override

definitions:

    # Basic variables required for packages to build correctly
    - libsuffix      : "" 
    - prefix         : "/usr"
    - bindir         : "%(prefix)/bin"
    - sbindir        : "%(prefix)/sbin"
    - includedir     : "%(prefix)/include"
    - datadir        : "%(prefix)/share"
    - localedir      : "%(datadir)/locale"
    - infodir        : "%(datadir)/info"
    - mandir         : "%(datadir)/man"
    - docdir         : "%(datadir)/doc"
    - localstatedir  : "/var"
    - sharedstatedir : "%(localstatedir)/lib"
    - runstatedir    : "/run"
    - sysconfdir     : "/etc"
    - libdir         : "%(prefix)/lib%(libsuffix)"
    - libexecdir     : "%(libdir)/%(name)"

    # The vendorID is encoded into the triplet, toolchain, builds, etc.
    # It must match the triplet from bootstrap-scripts.
    - vendorID       : "serpent-linux"

    # Must be set for CC/CXX/CPP to work
    - cc             : "%(compiler_c)"
    - cxx            : "%(compiler_cxx)"
    - cpp            : "%(compiler_cpp)"

actions              :

    # scriptBase is merged to the top of all newly generated build scripts.
    - scriptBase     : |
        #!/bin/sh
        set -e
        set -x
        TERM="dumb"; export TERM
        CFLAGS="%(cflags)"; export CFLAGS
        CXXFLAGS="%(cxxflags)"; export CXXFLAGS
        LDFLAGS="%(ldflags)"; export LDFLAGS
        CC="%(cc)"; export CC
        CXX="%(cxx)"; export CXX
        CPP="%(cpp)"; export CPP
        test -d "%(workdir)" || (echo "Work directory does not exist"; exit 1)
        cd "%(workdir)"

tuning              :
    # A set of groups we can toggle from the "tune" key

    # Root flags set up architecture + core flags, should always be enabled
    - base:
        enabled:
            - architecture
            - base

    - debug:
        enabled:
            - debug

    # Toggle frame-pointer
    - frame-pointer:
        enabled: no-omit-frame-pointer
        disabled: omit-frame-pointer

    # Enable bindnow functionality
    - bindnow:
        enabled: bindnow

    # Enable symbolic
    - symbolic:
        enabled: symbolic

    # Enable hardening
    - hardening:
        enabled: harden

    # Enable optimisation per given levels
    - optimize:
        options:
            - size:
                enabled: size
            - speed:
                enabled: speed
            - generic:
                enabled: generic
        default: generic

    # Enable ICF
    - icf:
        enabled: icf

    # Enable Polly
    - polly:
        enabled: polly

    # Toggle common
    - common:
        enabled: common
        disabled: no-common

    # Enable math
    - math:
        enabled: math

    # Enable noplt
    - noplt:
        enabled:
            - noplt
            - bindnow

    # Enable asneeded
    - asneeded:
        enabled: asneeded

flags               :

    # Needs overriding with -march/mtune values.
    - architecture:
        c         : ""
        cxx       : ""
        ld        : ""

    # Base flags, enabled by default
    - base:
        c         : "-pipe -D_FORTIFY_SOURCE=2 -Wall -Wno-error -Wp,-D_REENTRANT -fPIC"
        cxx       : "-pipe -D_FORTIFY_SOURCE=2 -Wall -Wno-error -Wp,-D_REENTRANT -fPIC"
        ld        : "-Wl,-O2,-z,max-page-size=0x1000,--sort-common,--gc-sections"

    - omit-frame-pointer:
        c         : "-fomit-frame-pointer"
        cxx       : "-fomit-frame-pointer"

    - no-omit-frame-pointer:
        c         : "-fno-omit-frame-pointer"
        cxx       : "-fno-omit-frame-pointer"

    # Toggle bindnow (ON)
    - bindnow:
        ld        : "-Wl,-z,relro,-z,now"

    # Toggle symbolic (OFF)
    - symbolic:
        ld        : "-Wl,-Bsymbolic-functions"

    # Hardening (ON)
    - harden:
        c         : "-fstack-protector-strong -fstack-clash-protection -fpie --param ssp-buffer-size=4"
        cxx       : "-fstack-protector-strong -fstack-clash-protection -fpie --param ssp-buffer-size=4"

    # Optimize for size (OFF)
    - size:
        llvm:
            c     : "-Oz -ffunction-sections -fdata-sections"
            cxx   : "-Oz -ffunction-sections -fdata-sections"
        gnu:
            c     : "-Os -ffunction-sections -fdata-sections"
            cxx   : "-Os -ffunction-sections -fdata-sections"

    # Optimize for speed (OFF)
    - speed:
        c         : "-O3"
        cxx       : "-O3"

    # Generic optimisation case
    - generic:
        c         : "-O2"
        cxx       : "-O2"

    # Enable LLVM ICF optimisations (OFF)
    - icf:
        llvm:
            ld    : "-Wl,--icf=safe"

    # Enable LLVM polly optimisations (OFF)
    - polly:
        llvm:
            c     : "-mllvm -polly"
            cxx   : "-mllvm -polly"

    # Toggle -fcommon (OFF)
    - common:
        c         : "-fcommon"
        cxx       : "-fcommon"

    # Toggle -fno-common (ON)
    - no-common:
        c         : "-fno-common"
        cxx       : "-fno-common"

    # Toggle debug optimisations (ON)
    - debug:
        c         : "-g -feliminate-unused-debug-types -fasynchronous-unwind-tables"
        cxx       : "-g -feliminate-unused-debug-types -fasynchronous-unwind-tables"

    # Toggle fast math (OFF)
    - math:
        c         : "-fno-math-errno -fno-trapping-math"
        cxx       : "-fno-math-errno -fno-trapping-math"

    # Toggle noplt, requires bindnow (OFF)
    - noplt:
        c         : "-fno-plt"
        cxx       : "-fno-plt"

    # Toggle asneeded (OFF)
    - asneeded:
        ld        : "-Wl,--as-needed"

    # Toggle runpath (OFF)
    - runpath:
        ld        : "-Wl,--enable-new-dtags"
